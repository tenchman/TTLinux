--- linux-2.6.22.18/drivers/char/Makefile.generic	2008-02-11 08:31:19.000000000 +0100
+++ linux-2.6.22.18/drivers/char/Makefile	2008-09-03 16:01:38.000000000 +0200
@@ -95,6 +95,7 @@ obj-$(CONFIG_NSC_GPIO)		+= nsc_gpio.o
 obj-$(CONFIG_VT1211_GPIO)	+= vt1211_gpio.o
 obj-$(CONFIG_W83627DHG_GPIO)	+= w83627dhg_gpio.o
 obj-$(CONFIG_W83627HF_GPIO)	+= w83627hf_gpio.o
+obj-$(CONFIG_W83627THF_GPIO)	+= w83627thf_gpio.o
 obj-$(CONFIG_TELCLOCK)		+= tlclk.o
 
 obj-$(CONFIG_WATCHDOG)		+= watchdog/
--- linux-2.6.22.18/drivers/char/Kconfig.generic	2008-02-11 08:31:19.000000000 +0100
+++ linux-2.6.22.18/drivers/char/Kconfig	2008-09-03 16:00:32.000000000 +0200
@@ -1016,6 +1016,14 @@ config GPIO_VR41XX
 
 	  If compiled as a module, it will be called w83627hf_gpio.
 
+config W83627THF_GPIO
+	tristate "WINBOND W83627THF GPIO support"
+	depends on X86_32
+	help
+	  WINBOND W83627THF GPIO support
+
+	  If compiled as a module, it will be called w83627thf_gpio.
+
 config RAW_DRIVER
 	tristate "RAW driver (/dev/raw/rawN) (OBSOLETE)"
 	depends on BLOCK
--- linux-2.6.22.18/include/linux/w83627thf_gpio.h.generic	2008-09-03 16:00:32.000000000 +0200
+++ linux-2.6.22.18/include/linux/w83627thf_gpio.h	2008-09-03 16:00:32.000000000 +0200
@@ -0,0 +1,23 @@
+/*
+ * WINBOND W83627THF GPIO driver.
+ *
+ * Copyright (c) 2007 Manfred Wassmann <info@berlinos.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the smems of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ */
+
+/* W83627THF Super I/O chip number of GPIO lines. Rounded up to a multiple of 8 */
+#define GPIO_MAX 32
+
+
+#ifndef IN_W83627THF_GPIO_C
+extern int w83627thf_gpio_line_avail(unsigned char line, int direction);
+
+extern int w83627thf_gpio_set(unsigned char line, unsigned int state);
+
+extern int w83627thf_gpio_get(unsigned char line, unsigned int *state);
+
+#endif /* IN_W83627THF_GPIO_C */
+
--- linux-2.6.22.18/drivers/char/w83627thf_gpio.c.generic	2008-09-04 13:35:45.000000000 +0200
+++ linux-2.6.22.18/drivers/char/w83627thf_gpio.c	2008-10-10 14:38:48.000000000 +0200
@@ -0,0 +1,965 @@
+/*
+ * WINBOND W83627THF GPIO driver.
+ *
+ * Copyright (c) 2007 Manfred Wassmann <info@berlinos.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the smems of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ */
+
+/* 
+ * Minor device numbers are allocated sequentially starting from zero,
+ * GPIO pins are numbered 20 - 27 for port 2, 30 - 37 port 3 etc, thus
+ * the minor device number corresponds to the pin number interpreted as
+ * octal with 020 (octal) subtracted.
+ *   port #2:  0 -  7
+ *   port #3:  8 - 15
+ *   ...
+ *   port #6: 40 - 47
+ */
+
+#include <linux/fs.h>
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/cdev.h>
+#include <linux/ioport.h>
+#include <linux/pci.h>
+#include <linux/delay.h> /* msleep() */
+#include <linux/spinlock.h>
+#include <asm/uaccess.h>
+#include <asm/io.h>
+
+#define IN_W83627THF_GPIO_C
+#include "linux/w83627thf_gpio.h"
+
+#define DRVNAME "w83627thf-gpio"
+
+/* GPIO port count */
+#define W83627THF_GPIO_COUNT 5
+
+/* First GPIO port number */
+#define W83627THF_GPIO_FIRST 1
+/* Last GPIO port number */
+#define W83627THF_GPIO_LAST 5
+
+/* lock for accessing configuration mode */
+static spinlock_t gpio_lock;
+
+MODULE_AUTHOR("Manfred Wassmann <info@berlinos.de>");
+MODULE_DESCRIPTION("WINBOND W83627THF GPIO Driver");
+MODULE_LICENSE("GPL");
+
+static int paranoid;
+module_param(paranoid, bool, 0);
+MODULE_PARM_DESC(paranoid,
+		 " Make sure input pins are configured as input when reading");
+
+static unsigned int debug;
+module_param(debug, uint, 0664);
+MODULE_PARM_DESC(debug, " Debugging level");
+
+static int major;
+module_param(major, int, 0444);
+MODULE_PARM_DESC(major, " Major device number");
+
+static unsigned char cir_addr;
+module_param(cir_addr, byte, 0);
+MODULE_PARM_DESC(cir_addr, " W83627THF control index register address (0x2E or 0x4E)");
+
+static unsigned char portmask = 0x01;
+module_param(portmask, byte, 0);
+MODULE_PARM_DESC(portmask, " GPIO port mask (default 0x01: port 1 enabled)");
+
+static unsigned char outmask[W83627THF_GPIO_COUNT];
+module_param_array(outmask, byte, NULL, 0);
+MODULE_PARM_DESC(outmask, " GPIO output lines bitmasks, one for each port");
+
+static unsigned char polarity[W83627THF_GPIO_COUNT];
+module_param_array(polarity, byte, NULL, 0);
+MODULE_PARM_DESC(polarity, " GPIO polarity bitmasks (0=normal, 1=inverted)");
+
+static int debounce = 1;
+module_param(debounce, bool, 0640);
+MODULE_PARM_DESC(debounce, " Debounce input lines (default: on)");
+
+
+/* Get the port index from the minor device number */
+#define W83627THF_PORT(minor) ((minor) >> 3)
+
+/* Get the port number from the minor device number */
+#define W83627THF_PORTNO(minor) (W83627THF_PORT(minor) + 1)
+
+/* Get configuration data register address from configuration index
+ * register address
+ */
+#define CDR_ADDR(cirAddr) ((cirAddr) + 1)
+
+/* convert outmask for writing into the control register:
+ *   ones in the parameter are zeroes in the register and vice versa.
+ */
+#define OUTPUT_MASK(portindex) (~outmask[portindex])
+
+struct devcount {
+	int in;
+	int out;
+};
+
+enum gpio_dir {
+	GPIO_INPUT = -1,
+	GPIO_NC,
+	GPIO_OUTPUT
+};
+
+typedef enum set_reg_mode {
+	SET_REG_SET,
+	SET_REG_AND,
+	SET_REG_OR,
+} set_reg_mode_t;
+
+struct gpio_iomap {
+	enum gpio_dir direction;
+	char name[8];
+};
+
+static struct gpio_iomap iomap[GPIO_MAX];
+
+static struct platform_device *pdevin;
+static struct platform_device *pdevout;
+static struct cdev w83627thf_gpio_cdev;
+static u32 firstminor, numdevs;
+
+
+static void selCtlReg(unsigned char reg)
+{
+	outb(reg, cir_addr);
+	//msleep(20);
+}
+
+
+static int writeCtlReg(unsigned char value)
+{
+	int rc = 0;
+
+	outb(value, CDR_ADDR(cir_addr));
+	//msleep(20);
+
+	if (debug) {
+		unsigned char reg = inb(cir_addr);
+		unsigned char newval = inb(CDR_ADDR(cir_addr));
+
+		rc = newval == value;
+		if (rc) {
+			printk(KERN_DEBUG
+			       "register 0x%02X updated: 0x%02X       OK\n",
+			       reg, value);
+		} else {
+			printk(KERN_DEBUG
+			       "register 0x%02X update 0x%02X -> 0x%02X"
+			       " FAILED\n", reg, value, newval);
+		}
+	}
+
+	return(rc);
+}
+
+
+static unsigned char readCtlReg(void)
+{
+	return(inb(CDR_ADDR(cir_addr)));
+}
+
+
+static
+int setRegister(unsigned char reg, unsigned char value, set_reg_mode_t mode)
+{
+	int rc = 0;
+	unsigned char oldval = ~0;
+	outb(reg, cir_addr);
+	//msleep(20);
+
+	if (mode != SET_REG_SET || debug) {
+		oldval = inb(CDR_ADDR(cir_addr));
+	}
+
+	switch (mode) {
+		case SET_REG_SET:
+			break;
+		case SET_REG_AND:
+			value &= oldval;
+			break;
+		case SET_REG_OR:
+			value |= oldval;
+			break;
+	}
+	outb(value, CDR_ADDR(cir_addr));
+
+	if (debug) {
+		unsigned char newval = inb(CDR_ADDR(cir_addr));
+
+		rc = newval == value;
+		if (rc) {
+			/* OK */
+			printk(KERN_DEBUG
+			       "register 0x%02X update 0x%02X -> 0x%02X OK\n",
+			       reg, oldval, value);
+		} else if (0xFF == newval && newval == oldval) {
+			/* register contents is 0xFF and hasn't changed
+			 * looks like a write only register.
+			 */
+			printk(KERN_DEBUG
+			       "register 0x%02X update 0x%02X -> 0x%02X"
+			       " now 0x%02X maybe W/O\n",
+			       reg, oldval, value, newval);
+		} else {
+			printk(KERN_DEBUG
+			       "register 0x%02X update 0x%02X -> 0x%02X"
+			       " FAILED (now 0x%02X)\n",
+			       reg, oldval, value, newval);
+		}
+	}
+
+	return(rc);
+}
+
+
+static int getRegister(unsigned char reg)
+{
+	outb(reg, cir_addr);
+	//msleep(20);
+
+	return(inb(CDR_ADDR(cir_addr)));
+}
+
+
+static void w83627thf_enterConfig(unsigned char cirAddress)
+{
+	outb_p(0x87, cirAddress);
+	outb_p(0x87, cirAddress);
+}
+
+
+static void w83627thf_exitConfig(unsigned char cirAddress)
+{
+	outb(0xAA, cirAddress);
+}
+
+
+static unsigned char w83627thf_cfg_offset(unsigned char port)
+{
+	switch (port) {
+	case 1: /* FALLTHROUGH */
+	case 2: /* FALLTHROUGH */
+	case 3:
+		return(0xF0);
+		break;
+	case 4:
+		return(0xF4);
+		break;
+	case 5:
+		return(0xF3);
+		break;
+	default:
+		return(0x0);
+		break;
+	}
+}
+
+
+static u32 w83627thf_portaddr(u32 minor)
+{
+	u32 rc = W83627THF_PORTNO(minor);
+
+	switch (rc) {
+		case 1: /* FALLTHROUGH */
+		case 2: /* FALLTHROUGH */
+		case 3: /* FALLTHROUGH */
+		case 4: /* FALLTHROUGH */
+		case 5: /* FALLTHROUGH */
+			rc = (w83627thf_cfg_offset(W83627THF_PORTNO(minor))
+			      + 0x1);
+			break;
+		default:
+			rc = 0;
+			break;
+	}
+
+	return(rc);
+}
+
+
+static int w83627thf_select_ldn_gpio(unsigned char port)
+{
+	int rc = 0;
+
+	switch (port) {
+		case 1:
+		case 5: /* FALLTHROUGH */
+			setRegister(0x7, 0x7, SET_REG_SET);
+			break;
+		case 2:
+			setRegister(0x7, 0x8, SET_REG_SET);
+			break;
+		case 3: /* FALLTHROUGH */
+		case 4:
+			setRegister(0x7, 0x9, SET_REG_SET);
+			break;
+		default:
+			printk(KERN_ERR "invalid port number: %u\n", port);
+			rc = -1;
+			break;
+	}
+
+	if (rc == 0 && debug) {
+		printk(KERN_DEBUG "LDN select %u\n", inb(CDR_ADDR(cir_addr)));
+	}
+
+	return(rc);
+}
+
+
+/** Set GPIO enabled and set up pins to select gpio function if pinSel is true.
+ *
+ * LDN must be selected appropriately.
+ */
+static void w83627thf_enable_gpio(unsigned char port, int pinSel)
+{
+	/* pin select GPIO */
+	if (pinSel) {
+		switch (port) {
+			case 1:
+				setRegister(0x29, 0x7D, SET_REG_AND);
+				setRegister(0x29, 0x41, SET_REG_OR);
+				break;
+			case 2:
+				/* pin select GPIO */
+				setRegister(0x29, 0x01, SET_REG_OR);
+				setRegister(0x2A, 0xFE, SET_REG_OR);
+				break;
+			case 3:
+				/* pin select GPIO */
+				setRegister(0x2B, 0x90, SET_REG_AND);
+				setRegister(0x2B, 0x10, SET_REG_OR);
+				setRegister(0x2C, 0x07, SET_REG_AND);
+				setRegister(0x2C, 0x04, SET_REG_OR);
+				break;
+			case 4:
+				/* pin select GPIO */
+				setRegister(0x2D, 0xDE, SET_REG_SET);
+				break;
+			case 5:
+				/* pin select GPIO */
+				setRegister(0x29, ~0x20, SET_REG_AND);
+				break;
+		}
+	}
+
+	/* enable GPIO */
+	switch (port) {
+		case 1:
+			setRegister(0x30, 0x01, SET_REG_OR);
+			break;
+		case 2:
+			/* enable GPIO */
+			setRegister(0x30, 0x01, SET_REG_OR);
+			break;
+		case 3:
+			/* enable GPIO */
+			setRegister(0x30, 0x01, SET_REG_OR);
+			break;
+		case 4:
+			/* enable GPIO */
+			setRegister(0x30, 0x02, SET_REG_OR);
+			break;
+		case 5:
+			/* enable GPIO */
+			setRegister(0x30, 0x08, SET_REG_OR);
+			break;
+		default:
+			printk(KERN_ERR "invalid port number: %u\n", port);
+			return;
+	}
+
+	if (debug) {
+		printk(KERN_DEBUG
+		       "GPIO port #%u enabled (CIR=0x%02X, CDR=0x%02X)\n",
+		       port, inb(cir_addr), inb(CDR_ADDR(cir_addr)));
+	}
+}
+
+
+/** Set up gpio pins direction and polarity.
+ *
+ * LDN must be selected appropriately.
+ */
+static void setup_gpio(unsigned char port, int check)
+{
+	unsigned char offset, portidx = port - 1;
+
+	offset = w83627thf_cfg_offset(port);
+
+	if (debug) {
+		printk(KERN_DEBUG
+		       "W83627THF %s GPIO port #%u (CR base 0x%02X):\n",
+		       check ? "checking" : "setting up", port, offset);
+	}
+
+	/* set polarity */
+	selCtlReg(offset + 0x2);
+	if (check) {
+		unsigned char pol = inb(CDR_ADDR(cir_addr));
+
+		if (pol != polarity[portidx]) {
+			printk(KERN_WARNING
+			       "GPIO port %u polarity setting has changed"
+			       " 0x%02X -> 0x%02X -- resetting\n",
+			       port, pol, polarity[portidx]);
+			writeCtlReg(polarity[portidx]);
+		}
+	} else {
+		writeCtlReg(polarity[portidx]);
+	}
+
+	if (debug) {
+		printk(KERN_DEBUG
+		       "  polarity:  set/read 0x%02X/0x%02X\n",
+		       polarity[portidx], inb(CDR_ADDR(cir_addr)));
+	}
+
+	/* set direction */
+	selCtlReg(offset + 0x0);
+	if (check) {
+		unsigned char direction = inb(CDR_ADDR(cir_addr));
+
+		if (direction != outmask[portidx]) {
+			printk(KERN_WARNING
+			       "GPIO port %u I/O direction setting has changed"
+			       " 0x%02X -> 0x%02X -- resetting\n",
+			       port, direction, outmask[portidx]);
+			writeCtlReg(OUTPUT_MASK(portidx));
+		}
+	} else {
+		writeCtlReg(OUTPUT_MASK(portidx));
+	}
+
+	if (debug) {
+		printk(KERN_DEBUG
+		       "  direction: set/read 0x%02X/0x%02X\n",
+		       outmask[portidx], inb(CDR_ADDR(cir_addr)));
+	}
+}
+
+
+static int w83627thf_test(unsigned char cirAddress)
+{
+	unsigned short device_id;
+
+	w83627thf_enterConfig(cirAddress);
+	outb(0x20, cirAddress);
+	device_id = inb(CDR_ADDR(cirAddress)) << 8;
+	if (0x8200 == device_id) {
+		outb(0x21, cirAddress);
+		device_id |= inb(CDR_ADDR(cirAddress));
+
+		//printk(KERN_DEBUG "Read device ID 0x%04X at 0x%02X\n",
+		 //      device_id, cirAddress);
+	} else {
+		printk(KERN_DEBUG "Read unknown device ID 0x%02X at 0x%02X\n",
+		       device_id >> 8, cirAddress);
+
+		device_id = 0;
+	}
+
+	return(device_id);
+}
+
+
+static int w83627thf_find(unsigned char * cirAddress)
+{
+	int rc = 0;
+	unsigned short device_id;
+
+	if ((device_id = w83627thf_test(0x2E))) {
+		*cirAddress = 0x2E;
+	}
+	else if ((device_id = w83627thf_test(0x4E))) {
+		*cirAddress = 0x4E;
+	}
+	else {
+		printk(KERN_WARNING "WINBOND W83627THF chip not found!\n");
+		rc = -ENODEV;
+	}
+
+#if 0
+	if (rc == 0) {
+		char rev[] = "*UNKNOWN*";
+		switch (device_id & 0x00FF) {
+		case 0x83:
+			rev[1] = '\0';
+			*rev = '1';
+			break;
+		}
+		printk(KERN_INFO
+		       "Found WINBOND W83627THF revision %s chip,"
+		       " CIR address 0x%02X\n",
+		       rev, *cirAddress);
+	}
+#else
+	printk(KERN_INFO "Found WINBOND W83627THF chip, CIR address 0x%02X\n",
+	       *cirAddress);
+#endif
+
+	return(rc);
+}
+
+
+/** Set the specified gpio line to the specified state.
+ *
+ */
+int w83627thf_gpio_set(unsigned char minor, unsigned char state)
+{
+	int rc = 0;
+	u32 base = w83627thf_portaddr(minor);
+	unsigned char mask;
+	unsigned long flags;
+
+	//printk(KERN_INFO DRVNAME": calling set line %d\n",minor);
+	spin_lock_irqsave(&gpio_lock, flags);
+	if (0 == base) {
+		rc = -EINVAL;
+		printk(KERN_ERR "invalid GPIO line: %u\n", minor);
+	} else {
+		w83627thf_enterConfig(cir_addr);
+		rc = w83627thf_select_ldn_gpio(W83627THF_PORTNO(minor));
+		w83627thf_enable_gpio(W83627THF_PORTNO(minor), 0);
+
+		if (debug) {
+			printk(KERN_DEBUG
+			       "GPIO port %u "
+			       "direction / inversion mask = 0x%02X / 0x%02X\n",
+			       W83627THF_PORTNO(minor),
+			       getRegister(base - 1), getRegister(base + 1));
+		}
+
+		/* Attn: Must stay in config mode with the w83627thf
+		 * to be able to read/write to the GPIO ports
+		 */
+		if (rc) {
+			w83627thf_exitConfig(cir_addr);
+		}
+	}
+
+	if (rc == 0) {
+		mask = 0x1 << (minor & 0x7);
+		if (state) {
+			setRegister(base, mask, SET_REG_OR);
+		} else {
+			setRegister(base, ~mask, SET_REG_AND);
+		}
+
+		if (debug) {
+			printk(KERN_DEBUG
+			       "W83627THF GPIO pin #%o at 0x%04X set o%s\n",
+			       minor, base, state ? "n" : "ff");
+		}
+
+		w83627thf_exitConfig(cir_addr);
+	}
+	spin_unlock_irqrestore(&gpio_lock, flags); 
+	return(rc);
+}
+
+
+/** get the specified gpio line state.
+ *
+ */
+int w83627thf_gpio_get(unsigned char minor, unsigned char *state)
+{
+	int rc = -EINVAL;
+	u32 base = w83627thf_portaddr(minor);
+	unsigned char inbyte, mask = 0x1 << (minor & 0x7);
+	static unsigned char lastbyte = 0;
+	unsigned long flags;
+
+	//printk(KERN_INFO DRVNAME": calling get line %d\n",minor);
+	spin_lock_irqsave(&gpio_lock, flags);
+	if (0 == base) {
+		printk(KERN_ERR "invalid GPIO line: %u\n", minor);
+	} else {
+		/* enter configuration mode */
+		w83627thf_enterConfig(cir_addr);
+		rc = w83627thf_select_ldn_gpio(W83627THF_PORTNO(minor));
+		w83627thf_enable_gpio(W83627THF_PORTNO(minor), 0);
+
+		if (debug) {
+			printk(KERN_DEBUG
+			       "GPIO port %u "
+			       "direction / inversion mask = 0x%02X / 0x%02X\n",
+			       W83627THF_PORTNO(minor),
+			       getRegister(base - 1), getRegister(base + 1));
+		}
+
+		if (paranoid
+		    && 0 == (outmask[W83627THF_PORT(minor)] & mask)) {
+			/* input line: double check I/O mode */
+			setup_gpio(W83627THF_PORTNO(minor), 1);
+		}
+
+		/* Attn: Must stay in config mode with the w83627thf
+		 * to be able to read/write to the GPIO ports
+		 */
+		if (rc) {
+			w83627thf_exitConfig(cir_addr);
+		}
+	}
+
+	if (0 == rc) {
+		selCtlReg(base);
+		inbyte = inb(CDR_ADDR(cir_addr));
+		if ( inbyte == 0xff ){
+			*state = lastbyte & mask ? 1 : 0;
+			printk(KERN_DEBUG DRVNAME": skipping irregular value 0x%02X minor=%d, lastbyte=0x%02X.\n",inbyte,minor,lastbyte);
+		}else{
+			*state = inbyte & mask ? 1 : 0;
+			lastbyte = inbyte;
+		}
+
+		if (debug) {
+			printk(KERN_DEBUG
+			       "W83627THF GPIO pin #%o"
+			       " at 0x%04X state = %u (o%s)\n",
+			       minor, base, *state, *state ? "n" : "ff");
+		}
+		/* leave configuration mode */
+		w83627thf_exitConfig(cir_addr);
+		rc = 0;
+	}
+	spin_unlock_irqrestore(&gpio_lock, flags); 
+	return(rc);
+}
+
+
+static ssize_t w83627thf_gpio_write(struct file *file, const char __user *data,
+				    size_t len, loff_t *ppos)
+{
+	ssize_t rc = len;
+	u32 minor = iminor(file->f_path.dentry->d_inode);
+	unsigned char cdata;
+
+	if (get_user(cdata, data)) {
+		rc = -EFAULT;
+	} else {
+		w83627thf_gpio_set(minor, cdata != '0');
+	}
+	*ppos = 0;
+
+	return len;
+}
+
+
+static ssize_t w83627thf_gpio_read(struct file *file, char __user *buf,
+				   size_t len, loff_t *ppos)
+{
+	ssize_t rc = 0;
+	u32 minor = iminor(file->f_path.dentry->d_inode);
+	unsigned char out;
+	ssize_t	count = 0;
+
+	if (*ppos == 0) {
+		if ((rc = w83627thf_gpio_get(minor, &out))) {
+			printk(KERN_ERR
+			       "w83627thf GPIO get from minor dev %u: %d\n",
+			       minor, rc);
+		} else {
+			out = out ? '1' : '0';
+
+			if (put_user(out, buf)) {
+				rc = -EFAULT;
+			} else if (++count < len) {
+				/* add a line-feed if there is room */
+				put_user('\n', buf + count++);
+			}
+		}
+	}
+	*ppos += count;
+
+	return count;
+}
+
+
+static int w83627thf_gpio_open(struct inode *inode, struct file *file)
+{
+	int rc = -EINVAL;
+	u32 minor = iminor(inode);
+
+	if (! (1 < W83627THF_PORTNO(minor) || W83627THF_PORTNO(minor) < 7)) {
+		printk(KERN_DEBUG "invalid GPIO port %u\n",
+		       W83627THF_PORTNO(minor));
+		rc = -ENODEV;
+	} else if (portmask & (1 << (W83627THF_PORT(minor)))) {
+		/* The portmask carries a bit for each enabled port */
+		rc = nonseekable_open(inode, file);
+	} else {
+		printk(KERN_DEBUG
+		"W83627THF gpio line not enabled: minor %u (portmask bit 0x%02X)\n",
+		       minor, (1 << (W83627THF_PORT(minor))));
+	}
+
+	return(rc);
+}
+
+
+static const struct file_operations w83627thf_gpio_fops = {
+	.owner	= THIS_MODULE,
+	.write	= w83627thf_gpio_write,
+	.read	= w83627thf_gpio_read,
+	.open	= w83627thf_gpio_open
+};
+
+
+static inline void w83627thf_devmap(unsigned char portidx,
+				    struct devcount * devcount)
+{
+	unsigned char mask = 0x80, base = portidx * 8;
+	struct gpio_iomap * map = iomap + base;
+        char *lissnames[6] = { "ready", "masterg", "lock","unlock","masterr","state"};
+	int i=0; // if you dont want liss-leds initialize i to 6
+
+	//printk(KERN_DEBUG "Generating GPIO port %u device map\n", portidx + 1);
+	if (portidx == W83627THF_GPIO_LAST - 1) {
+		/* last port has 6 lines only */
+		map += 5;
+		mask = 0x20;
+	} else {
+		map += 7;
+	}
+
+	while (mask) {
+		if (outmask[portidx] & mask) {
+			++devcount->out;
+			map->direction = GPIO_OUTPUT;
+			/* this way we get the leds named as the leds are on liss systems */
+			if ( i < 6 ) {
+				snprintf(map->name, sizeof(map->name),"%s",lissnames[i]);
+				i++;
+			}else{
+			/* this way we get the leds numbered like the GPIO pins on
+			 * the w83627thf.
+			 */
+			snprintf(map->name, sizeof(map->name), "gpio%o",
+				 8 + (map - iomap));
+			}
+		} else {
+			snprintf(map->name, sizeof(map->name), "gpio%o",
+				 8 + (map - iomap));
+			++devcount->in;
+			map->direction = GPIO_INPUT;
+		}
+		//printk(KERN_DEBUG "  line %s: %sput\n", map->name,
+		//       map->direction == GPIO_INPUT ? "in" : "out");
+		mask >>= 1;
+		--map;
+	}
+}
+
+
+static int w83627thf_setup_platform_devs(struct devcount * devcount)
+{
+	int rc = 0;
+	struct resource ires[devcount->in];
+	struct resource ores[devcount->out];
+	int i, o, m;
+
+	for (i = 0, o = 0, m = 0; m < GPIO_MAX; m++) {
+		//printk(KERN_DEBUG "Setting up platform device #%d: %s\n",
+		//       m, (iomap[m].direction == GPIO_NC ? "NC" :
+		//	   (iomap[m].direction == GPIO_INPUT
+		//	    ? "Input"
+		//	    : "Output")));
+		switch (iomap[m].direction) {
+			case GPIO_NC:
+				/* NOP */
+				break;
+			case GPIO_INPUT:
+				ires[i].name = iomap[m].name;
+				ires[i].start = ires[i].end = m;
+				ires[i].flags = 1;
+				ires[i].parent = ires[i].sibling = ires[i].child
+					= NULL;
+				++i;
+				break;
+			case GPIO_OUTPUT:
+				ores[o].name = iomap[m].name;
+				ores[o].start = ores[i].end = m;
+				ores[o].flags = 1;
+				ores[o].parent = ores[o].sibling = ores[o].child
+					= NULL;
+				++o;
+				break;
+		}
+		//printk(KERN_DEBUG
+		//       "Checkpoint Platform Device Setup Complete\n");
+	}
+
+	if (IS_ERR(pdevout = platform_device_register_simple(DRVNAME "-out", 0,
+							     ores,
+							     devcount->out))) {
+		printk(KERN_ERR
+		       "Error allocating platform device: " DRVNAME "-out\n");
+		rc = -ENOMEM;
+	} else if (IS_ERR(pdevin
+			  = platform_device_register_simple(DRVNAME "-in", 0,
+							    ires,
+							    devcount->in))) {
+		printk(KERN_ERR
+		       "Error allocating platform device: " DRVNAME "-in\n");
+		rc = -ENOMEM;
+	} else {
+		//printk(KERN_DEBUG "platform devices registered: " DRVNAME
+		//       "-{in,out}\n");
+	}
+
+	return(rc);
+}
+
+
+static int __init w83627thf_gpio_init(void)
+{
+	int rc = -ENOSYS;
+	unsigned char pn = 0;
+	struct devcount devcount = { .in = 0, .out = 0 };
+	dev_t dev_id;
+
+	/* mask out ports indexed 3 to 7, which do not exist. */
+	portmask &= 007;
+	/* mask out GPIO pins 36 and 37 which do not exist. */
+	polarity[2] &= 0x3F;
+	outmask[2]  &= 0x3F;
+
+	/* Sanity checks */
+	if (0 == portmask) {
+		printk(KERN_ERR "W83627THF GPIO: "
+		       "error loading module: no gpio ports enabled -- aborting!\n");
+		return(-EINVAL);
+	}
+
+	/* Detect the w83627thf chip and get the control index
+	 * register address.
+	 */
+	printk(KERN_DEBUG "Detecting WINBOND W83627THF chip...\n");
+	rc = w83627thf_find(&cir_addr);
+	if (rc) {
+		return(rc);
+	}
+
+	/* Enable GPIO */
+	for (pn = W83627THF_GPIO_LAST + 1;  pn-- > W83627THF_GPIO_FIRST;) {
+		if (portmask & (0x1 << (pn - 1))) {
+			w83627thf_select_ldn_gpio(pn);
+			w83627thf_enable_gpio(pn, 1);
+			setup_gpio(pn, 0);
+		}
+	}
+
+	/* Get the first minor device number, try port numbers 2 to 6
+	 * Beware: pn is the port index here! I.e. port number minus one.
+	 */
+	pn = 0;
+	while (pn < W83627THF_GPIO_LAST && 0 == (portmask & (1 << pn))) {
+		++pn;
+	}
+
+	if (pn >= W83627THF_GPIO_LAST) {
+		printk(KERN_ERR "no valid GPIO ports selected\n");
+		return(-EINVAL);
+	}
+
+	//printk(KERN_DEBUG "Checkpoint First Configured Port: %u\n", pn + 1);
+
+	/* Allocate character devices */
+	/* calculate consecutive device numbers range */
+	firstminor = pn * 8;
+	w83627thf_devmap(pn, &devcount);
+	while (++pn < W83627THF_GPIO_LAST) {
+		/* add 8 lines per port if port is selected in portmask */
+		if (portmask & (1 << pn)) {
+			w83627thf_devmap(pn, &devcount);
+		}
+	}
+	numdevs = devcount.in + devcount.out;
+
+	//printk(KERN_DEBUG
+	//       "Checkpoint Devices Mapped: %u in, %u out, %u total\n",
+	//       devcount.in, devcount.out, numdevs);
+
+	if (rc == 0) {
+		if (major) {
+			dev_id = MKDEV(major, firstminor);
+			rc = register_chrdev_region(dev_id, numdevs, DRVNAME);
+		} else {
+			rc = alloc_chrdev_region(&dev_id, firstminor,
+						 numdevs, DRVNAME);
+			major = MAJOR(dev_id);
+		}
+	}
+
+	//printk(KERN_DEBUG "Checkpoint Character Device Regions Registered\n");
+
+	/* Register platform device */
+	if (rc || (rc = w83627thf_setup_platform_devs(&devcount))) {
+		/* Error -- cleanup */
+		printk(KERN_ERR
+		       "Error setting up WINBOND W83627THF platform devices\n");
+
+		if (!IS_ERR(pdevin)) {
+			platform_device_put(pdevin);
+			platform_device_del(pdevin);
+		}
+		if (!IS_ERR(pdevout)) {
+			platform_device_put(pdevout);
+			platform_device_del(pdevout);
+		}
+
+		if (rc != -ENODEV) {
+			rc = -1;
+		}
+	} else {
+		//printk(KERN_DEBUG
+		//       DRVNAME ": portmask=0x%X major=%d\n",
+		//       portmask, major);
+
+		cdev_init(&w83627thf_gpio_cdev, &w83627thf_gpio_fops);
+		cdev_add(&w83627thf_gpio_cdev, dev_id, numdevs);
+	}
+        w83627thf_exitConfig(cir_addr);
+	return(rc);
+}
+
+
+static void __exit w83627thf_gpio_cleanup(void)
+{
+	dev_t dev_id = MKDEV(major, firstminor);
+
+	cdev_del(&w83627thf_gpio_cdev);
+	unregister_chrdev_region(dev_id, numdevs);
+	platform_device_unregister(pdevin);
+	platform_device_unregister(pdevout);
+}
+
+
+module_init(w83627thf_gpio_init);
+module_exit(w83627thf_gpio_cleanup);
+
+EXPORT_SYMBOL(w83627thf_gpio_get);
+EXPORT_SYMBOL(w83627thf_gpio_set);
+
+/*
+ * Local Variables:
+ * mode: c
+ * c-basic-offset: 8
+ * tab-width: 8
+ * End:
+ */
