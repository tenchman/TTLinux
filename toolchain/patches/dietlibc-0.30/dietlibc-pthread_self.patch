--- dietlibc-0.30/libpthread/pthread_internal.c.pthread	2004-06-07 19:05:03.000000000 +0200
+++ dietlibc-0.30/libpthread/pthread_internal.c	2008-05-16 00:25:49.000000000 +0200
@@ -100,6 +100,8 @@ static _pthread_descr __thread_find_(int
   return cur;
 }
 
+#define CURRENT_STACK_FRAME  ({ char __csf; &__csf; })
+
 /* get thread-self descriptor O(1)/O(n*) */
 _pthread_descr __thread_self(void) {
   /* O(1) "search" */
@@ -108,6 +110,8 @@ _pthread_descr __thread_self(void) {
   asm("call_pal 158" : "=r"(cur) );	/* PAL_rduniq = 158 */
 #else	/* alpha */
   register _pthread_descr cur=0;
+  register int i;
+  void *sp = CURRENT_STACK_FRAME;
 #if defined(__sparc__)
   asm("mov %%g6,%0" : "=r"(cur) );	/* %g6 (res. system use) is used as thread pointer */
 #elif defined(__s390__)
@@ -117,8 +121,25 @@ _pthread_descr __thread_self(void) {
 #else	/* other */
   /* all other archs:
    * search the thread depending on the PID O(n*) */
+#if 0
   cur=__thread_find_(getpid());
   if (cur) UNLOCK(cur);
+#else
+  if (__thread_started == PTHREAD_ONCE_INIT) {
+    cur = &_main_thread;
+    LOCK(cur);
+  } else for (i=0; i<NR_BUCKETS; ++i) {
+    cur = _thread_hash_tid[i];
+    for (; cur; cur = cur->next) {
+      if (sp >= cur->stack_begin && sp < cur->stack_end) {
+	goto found;
+	LOCK(cur);
+      }
+    }
+  }
+found:
+  if (cur) UNLOCK(cur);
+#endif
 #endif	/* other */
 #endif	/* alpha */
   return (cur)?cur:&_main_thread;
