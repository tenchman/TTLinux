--- dietlibc-0.30/test/string/strlen.c.strlen	2003-12-15 14:07:42.000000000 +0100
+++ dietlibc-0.30/test/string/strlen.c	2008-03-31 11:00:19.000000000 +0200
@@ -1,10 +1,35 @@
 #include <assert.h>
 #include <string.h>
+#include <endian.h>
+
+/* make it large enough to test all possible alignments, number of trailing
+ * bytes and word sizes  */
+#define BUFLEN	(__WORDSIZE/8 * 4)
 
 int main() {
-  const char* x="foo bar baz";
+  /* will hold the string, the trailing zero and a test pattern */
+  char		buf[BUFLEN + 1 + __WORDSIZE/8];
+  size_t	len;
+
   assert(strlen("")==0);
-  assert(strlen(x)==11);
-  assert(strlen(x+5)==6);
+
+  for (len=0; len<BUFLEN; ++len) {
+	  unsigned int	mask;
+
+	  buf[len]   = len%10 + '0';
+	  buf[len+1] = '\0';
+
+	  for (mask=0; mask<(1u<<__WORDSIZE/8); ++mask) {
+		  size_t	bit;
+		  size_t	i;
+
+		  for (bit=0; bit<__WORDSIZE/8; ++bit)
+			  buf[len+2+bit] = (mask & (1u<<bit)) ? 0xff : 0;
+
+		  for (i=0; i<=len; ++i)
+			  assert(strlen(buf+i)==len+1-i);
+	  }
+  }
+
   return 0;
 }
--- dietlibc-0.30/test/Makefile.strlen	2003-12-15 14:07:42.000000000 +0100
+++ dietlibc-0.30/test/Makefile	2008-03-31 11:00:33.000000000 +0200
@@ -13,7 +13,7 @@ gethostbyname_r getmntent getopt getpass
 glob grent hasmntopt hello iconv if_nameindex ltostr malloc-debugger md5_testharness \
 memccpy memchr memcmp memcpy memrchr memusage mktime mmap_test pipe printf printftest \
 protoent prototypes putenv pwent rand48 read1 readdir regex select sendfile servent siglist \
-speed spent sprintf sscanf stdarg strcasecmp strcmp strlen strncat strncpy strptime strrchr \
+speed spent sprintf sscanf stdarg strcasecmp strcmp strncat strncpy strptime strrchr \
 strstr strtol sysenter ungetc waitpid
 
 test: $(TESTPROGRAMS)
--- dietlibc-0.30/test/runtests.sh.strlen	2003-12-15 14:07:42.000000000 +0100
+++ dietlibc-0.30/test/runtests.sh	2008-03-31 11:00:33.000000000 +0200
@@ -1,6 +1,6 @@
 SUBDIRS="dirent inet stdio string stdlib time"
 
-TESTPROGRAMS="adjtime argv atexit bsearch byteswap calloc confstr empty flush fputc ffs fnmatch ftw fwrite getaddrinfo getenv getdelim getgrnam gethostbyaddr gethostbyname gethostbyname_r getmntent getopt getpwnam getservbyname getservbyport getusershell glob grent hasmntopt hello iconv if_nameindex ltostr malloc-debugger md5_testharness memccpy memchr memcmp memcpy memrchr memusage mktime mmap_test pipe printf printftest protoent prototypes putenv pwent rand48 readdir regex select sendfile servent siglist speed spent sprintf sscanf stdarg strcasecmp strcmp strlen strncat strncpy strptime strrchr strstr strtol sysenter ungetc waitpid"
+TESTPROGRAMS="adjtime argv atexit bsearch byteswap calloc confstr empty flush fputc ffs fnmatch ftw fwrite getaddrinfo getenv getdelim getgrnam gethostbyaddr gethostbyname gethostbyname_r getmntent getopt getpwnam getservbyname getservbyport getusershell glob grent hasmntopt hello iconv if_nameindex ltostr malloc-debugger md5_testharness memccpy memchr memcmp memcpy memrchr memusage mktime mmap_test pipe printf printftest protoent prototypes putenv pwent rand48 readdir regex select sendfile servent siglist speed spent sprintf sscanf stdarg strcasecmp strcmp strncat strncpy strptime strrchr strstr strtol sysenter ungetc waitpid"
 
 STDIN="read1"
 PASS="getpass" 
--- dietlibc-0.30/lib/strstr.c.strlen	2003-08-19 21:34:18.000000000 +0200
+++ dietlibc-0.30/lib/strstr.c	2008-03-31 11:00:43.000000000 +0200
@@ -4,7 +4,7 @@
 char *strstr(const char *haystack, const char *needle) {
   size_t nl=strlen(needle);
   size_t hl=strlen(haystack);
-  int i;
+  size_t i;
   if (!nl) goto found;
   if (nl>hl) return 0;
   for (i=hl-nl+1; __likely(i); --i) {
--- dietlibc-0.30/lib/strlen.c.strlen	2003-08-19 21:34:18.000000000 +0200
+++ dietlibc-0.30/lib/strlen.c	2008-03-31 11:08:52.000000000 +0200
@@ -1,6 +1,7 @@
 #include <endian.h>
 #include "dietfeatures.h"
 #include <string.h>
+#include <stdint.h>
 
 #ifdef WANT_SMALL_STRING_ROUTINES
 size_t strlen(const char *s) {
@@ -10,38 +11,88 @@ size_t strlen(const char *s) {
   return i;
 }
 #else
-static const unsigned long magic = 0x01010101;
+
+#if __WORDSIZE == 64
+typedef uint64_t	word_t;
+#elif __WORDSIZE == 32
+typedef uint32_t	word_t;
+#else
+#error unsupported __WORDSIZE
+#endif
+
+static word_t const	magic = (word_t)(0x0101010101010101ull);
 
 size_t strlen(const char *s)
 {
   const char *t = s;
-  unsigned long word;
+  word_t	word;
+  word_t	mask;
 
-  if (!s) return 0;
+  if (__unlikely(!s)) return 0;
 
   /* Byte compare up until word boundary */
-  for (; ((unsigned long) t & 3); t++)
+  for (; ((unsigned long) t & (sizeof(magic)-1)); t++)
     if (!*t) return t - s;
 
   /* Word compare */
   do {
-    word = *((unsigned long *) t); t += 4;
+    word = *((word_t const *) t); t += sizeof word;
     word = (word - magic) &~ word;
     word &= (magic << 7);
   } while (__likely(word == 0));
 
-#if BYTE_ORDER == LITTLE_ENDIAN
-  /* word & 0x80808080 == word */
-  word = (word - 1) & (magic << 10);
-  word += (word << 8) + (word << 16);
-  t += word >> 26;
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+  (void)mask;
+  switch (sizeof(word)) {
+  case 8:
+    /* word & 0x8080808080808080 == word */
+    word = (word - 1) & (magic << 8);
+    word += (word << 32);
+    word += (word << 16);
+    word += (word << 8);
+    t += word >> 56;
+    break;
+
+  case 4:
+    /* word & 0x80808080 == word */
+    word = (word - 1) & (magic << 10);
+    word += (word << 8) + (word << 16);
+    t += word >> 26;
+    break;
+
+  default: { char exc[sizeof(word)==8]; (void)exc; }
+  }
 #else
-  if ((word & 0x80800000) == 0) {
-    word <<= 16;
-    t += 2;
+  mask = (magic << 7);
+
+  switch (sizeof(word)) {
+  case 8:
+    mask <<= 4*8;
+    if ((word & mask) == 0) {
+      t     += 4;
+      word <<= 4*8;
+    }
+    /* fallthrough */
+
+  case 4:
+    mask <<= 2*8;
+    if ((word & mask) == 0) {
+      t     += 2;
+      word <<= 2*8;
+    }
+    /* fallthrough */
+
+  case 2:
+    mask <<= 1*8;
+    if ((word & mask) == 0) {
+      t     += 1;
+      word <<= 1*8;
+    }
+    break;
+
+  default: { char exc[sizeof(word)==8]; (void)exc; }
   }
-  if ((word & 0x80000000) == 0) t += 1;
 #endif
-  return ((const char *) t) - 4 - s;
+  return t - sizeof(word) - s;
 }
 #endif
