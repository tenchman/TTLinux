--- dietlibc-0.31/lib/alloc.c.memalign	2008-04-15 18:25:29.000000000 +0200
+++ dietlibc-0.31/lib/alloc.c	2008-04-15 19:21:00.000000000 +0200
@@ -32,6 +32,10 @@
 #endif
 
 typedef struct {
+#ifdef WANT_POSIX_MEMALIGN
+  void*  start;
+  void*  __pad; /* unused, pad to 32/64 bits */
+#endif
   void*  next;
   size_t size;
 } __alloc_t;
@@ -132,6 +135,11 @@
   if (ptr) {
     size=((__alloc_t*)BLOCK_START(ptr))->size;
     if (size) {
+#ifdef WANT_POSIX_MEMALIGN
+      void *tmp;
+      if ((tmp=((__alloc_t*)BLOCK_START(ptr))->start))
+	ptr=tmp;
+#endif
       if (size<=__MAX_SMALL_SIZE)
 	__small_free(ptr,size);
       else
@@ -167,6 +175,9 @@
   }
   if (ptr==MAP_FAILED) goto err_out;
   ptr->size=need;
+#ifdef WANT_POSIX_MEMALIGN
+  ptr->start=NULL;
+#endif
   return BLOCK_RET(ptr);
 err_out:
   (*__errno_location())=ENOMEM;
@@ -175,6 +186,32 @@
 void* __libc_malloc(size_t size) __attribute__((alias("_alloc_libc_malloc")));
 void* malloc(size_t size) __attribute__((weak,alias("_alloc_libc_malloc")));
 
+#ifdef WANT_POSIX_MEMALIGN
+int __libc_posix_memalign(void **memptr, size_t alignment, size_t _size);
+int __libc_posix_memalign(void **memptr, size_t alignment, size_t _size) {
+  register size_t size=_size+alignment;
+  void *ptr;
+  if (alignment % sizeof(void*) || size<_size) {
+    (*__errno_location())=EINVAL;
+    return -1;
+  }
+  
+  if (!(ptr=malloc(size))) /* errno is set in _alloc_libc_malloc() */
+    return -1;
+  
+  if ((size_t)ptr%alignment) {
+    void *allignedptr = ptr-((size_t)ptr%alignment)+alignment;
+    __alloc_t* tmp = (__alloc_t*)BLOCK_START(allignedptr);
+    memmove(tmp, BLOCK_START(ptr),sizeof(__alloc_t));
+    tmp->start = ptr;
+    ptr=BLOCK_RET(tmp);
+  }
+  *memptr=ptr;
+  return 0;
+}
+int posix_memalign(void **memptr, size_t alignment, size_t _size) __attribute__((weak,alias("__libc_posix_memalign")));
+#endif
+
 void* __libc_calloc(size_t nmemb, size_t _size);
 void* __libc_calloc(size_t nmemb, size_t _size) {
   register size_t size=_size*nmemb;
--- dietlibc-0.31/include/stdlib.h.memalign	2008-04-15 18:25:29.000000000 +0200
+++ dietlibc-0.31/include/stdlib.h	2008-04-15 18:25:30.000000000 +0200
@@ -18,6 +18,8 @@
 char *getenv(const char *name) __THROW __pure;
 __END_NAMESPACE_STD
 
+int posix_memalign(void **memptr, size_t alignment, size_t size) __THROW;
+
 int putenv(const char *string) __THROW;
 int setenv(const char *name, const char *value, int overwrite) __THROW;
 int unsetenv(const char *name) __THROW;
