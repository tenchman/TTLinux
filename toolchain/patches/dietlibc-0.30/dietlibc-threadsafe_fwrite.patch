--- dietlibc-0.30/libstdio/fwrite.c.threadsafe_fwrite	2009-04-22 20:39:15.000000000 +0200
+++ dietlibc-0.30/libstdio/fwrite.c	2009-04-22 20:40:32.000000000 +0200
@@ -5,22 +5,43 @@
 
 size_t fwrite_unlocked(const void *ptr, size_t size, size_t nmemb, FILE *stream) {
   ssize_t res;
-  unsigned long len=size*nmemb;
-  long i;
-  if (!(stream->flags&CANWRITE)) {
+  size_t len=size*nmemb;
+  size_t i,done;
+  if (!__likely(stream->flags&CANWRITE) || __fflush4(stream,0)) {
+kaputt:
     stream->flags|=ERRORINDICATOR;
     return 0;
   }
   if (!nmemb || len/nmemb!=size) return 0; /* check for integer overflow */
-  if (len>stream->buflen || (stream->flags&NOBUF)) {
+  if (__unlikely(len>stream->buflen || (stream->flags&NOBUF))) {
     if (fflush_unlocked(stream)) return 0;
     do {
       res=__libc_write(stream->fd,ptr,len);
     } while (res==-1 && errno==EINTR);
   } else {
-    register const unsigned char *c=ptr;
-    for (i=len; i>0; --i,++c)
-      if (fputc_unlocked(*c,stream)) { res=len-i; goto abort; }
+    /* try to make the common case fast */
+    size_t todo=stream->buflen-stream->bm;
+    if (todo>len) todo=len;
+
+    if (todo) {
+      if (stream->flags&BUFLINEWISE) {
+	for (i=0; i<todo; ++i) {
+	  if ((stream->buf[stream->bm++]=((char*)ptr)[i])=='\n') {
+	    if (fflush_unlocked(stream)) goto kaputt;
+	  }
+	}
+      } else {
+	memcpy(stream->buf+stream->bm,ptr,todo);
+	stream->bm+=todo;
+      }
+      done=todo;
+    } else
+      done=0;
+    for (i=done; i<len; ++i)
+      if (fputc_unlocked(((char*)ptr)[i],stream)) {
+	res=len-i;
+	goto abort;
+      }
     res=len;
   }
   if (res<0) {
--- dietlibc-0.30/libpthread/pthread_fwrite.c.threadsafe_fwrite	2009-04-22 20:39:52.000000000 +0200
+++ dietlibc-0.30/libpthread/pthread_fwrite.c	2009-04-22 20:40:20.000000000 +0200
@@ -0,0 +1,9 @@
+#include <dietstdio.h>
+
+size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) {
+  size_t tmp;
+  pthread_mutex_lock(&stream->m);
+  tmp=fwrite_unlocked(ptr,size,nmemb,stream);
+  pthread_mutex_unlock(&stream->m);
+  return tmp;
+}
