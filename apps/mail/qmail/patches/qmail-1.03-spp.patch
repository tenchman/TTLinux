--- qmail-1.03/Makefile.spp	Tue Feb  8 12:55:05 2005
+++ qmail-1.03/Makefile	Tue Feb  8 13:18:37 2005
@@ -1513,16 +1513,21 @@
 auto_split.h
 	./compile qmail-showctl.c
 
+qmail-spp.o: \
+compile qmail-spp.c readwrite.h stralloc.h substdio.h control.h str.h \
+byte.h env.h exit.h wait.h fork.h fd.h fmt.h getln.h
+	./compile qmail-spp.c
+
 qmail-smtpd: \
 load qmail-smtpd.o rcpthosts.o commands.o timeoutread.o \
 timeoutwrite.o ip.o ipme.o ipalloc.o control.o constmap.o received.o \
 date822fmt.o now.o qmail.o cdb.a fd.a wait.a datetime.a getln.a \
 open.a sig.a case.a env.a stralloc.a alloc.a substdio.a error.a str.a \
-fs.a auto_qmail.o base64.o sslSocket.o socket.lib
+fs.a auto_qmail.o base64.o qmail-spp.o sslSocket.o socket.lib
 	./load qmail-smtpd rcpthosts.o commands.o timeoutread.o \
 	timeoutwrite.o ip.o ipme.o ipalloc.o control.o constmap.o \
 	received.o date822fmt.o now.o qmail.o cdb.a fd.a wait.a \
-	datetime.a getln.a open.a sig.a case.a env.a stralloc.a \
+	datetime.a getln.a open.a sig.a case.a qmail-spp.o env.a stralloc.a \
 	alloc.a substdio.a error.a str.a fs.a auto_qmail.o base64.o \
 	sslSocket.o `cat socket.lib` -lmatrixssl
 
@@ -1533,7 +1538,7 @@
 qmail-smtpd.o: \
 compile qmail-smtpd.c sig.h readwrite.h stralloc.h gen_alloc.h \
 substdio.h alloc.h auto_qmail.h control.h received.h constmap.h \
-error.h ipme.h ip.h ipalloc.h ip.h gen_alloc.h ip.h qmail.h \
+error.h ipme.h ip.h ipalloc.h ip.h gen_alloc.h ip.h qmail.h qmail-spp.h \
 substdio.h str.h fmt.h scan.h byte.h case.h env.h now.h datetime.h \
 exit.h rcpthosts.h timeoutread.h timeoutwrite.h commands.h wait.h \
 fd.h base64.h sslSocket.h
--- qmail-1.03/qmail-smtpd.c.spp	Tue Feb  8 12:55:05 2005
+++ qmail-1.03/qmail-smtpd.c	Tue Feb  8 13:14:13 2005
@@ -27,6 +27,9 @@
 #include "commands.h"
 #include "wait.h"
 #include "fd.h"
+#include "qmail-spp.h"
+
+int spp_val;
 
 #include <stdio.h>
 
@@ -234,6 +237,7 @@
   if (x) { scan_ulong(x,&u); tarpitdelay = u; };
 
   if (rcpthosts_init() == -1) die_control();
+  if (spp_init() == -1) die_control();
 
   bmfok = control_readfile(&bmf,"control/badmailfrom",0);
   if (bmfok == -1) die_control();
@@ -353,6 +357,7 @@
 
 int seenmail = 0;
 int flagbarf; /* defined if seenmail */
+int allowed;
 stralloc mailfrom = {0};
 stralloc rcptto = {0};
 int recipcount;
@@ -360,11 +365,13 @@
 
 void smtp_helo(arg) char *arg;
 {
+  if(!spp_helo(arg)) return;
   smtp_greet("250 "); out("\r\n");
   seenmail = 0; dohelo(arg);
 }
 void smtp_ehlo(arg) char *arg;
 {
+  if(!spp_helo(arg)) return;
   smtp_greet("250-");
 #ifdef TLS
   if (!ssl) out("\r\n250-STARTTLS");
@@ -382,12 +389,15 @@
 }
 void smtp_rset()
 {
+  spp_rset();
   seenmail = 0;
   out("250 flushed\r\n");
 }
 void smtp_mail(arg) char *arg;
 {
   if (!addrparse(arg)) { err_syntax(); return; }
+  if (!(spp_val = spp_mail())) return;
+  if (spp_val == 1)
   flagbarf = bmfcheck();
   seenmail = 1;
   if (!stralloc_copys(&rcptto,"")) die_nomem();
@@ -416,77 +426,82 @@
   if (!seenmail) { err_wantmail(); return; }
   if (!addrparse(arg)) { err_syntax(); return; }
   if (flagbarf) { err_bmf(); return; }
-  if (relayclient) {
-    --addr.len;
-    if (!stralloc_cats(&addr,relayclient)) die_nomem();
-    if (!stralloc_0(&addr)) die_nomem();
-  }
-  else
+  if (!relayclient) allowed = addrallowed();
+  if (!(spp_val = spp_rcpt(allowed))) return;
+  if (spp_val == 1) {
+    if (relayclient) {
+      --addr.len;
+      if (!stralloc_cats(&addr,relayclient)) die_nomem();
+      if (!stralloc_0(&addr)) die_nomem();
+    }
+    else
 #ifndef TLS
-    if (!addrallowed()) { err_nogateway(); return; }
+      if (!allowed) { err_nogateway(); return; }
 #else
 #ifdef MATRIXSSL
-    if (!addrallowed())
-    {
-      if (ssl)
+      if (!allowed)
       {
-        stralloc tlsclients = {0};
-        struct constmap maptlsclients;
-        if((control_readfile(&tlsclients,"control/tlsclients",0) != 1) ||
-            !constmap_init(&maptlsclients,tlsclients.s,tlsclients.len,0))
-          { err_nogateway(); return; }
-	sslRehandshake(ssl);
+	if (ssl)
+	{
+	  stralloc tlsclients = {0};
+	  struct constmap maptlsclients;
+	  if((control_readfile(&tlsclients,"control/tlsclients",0) != 1) ||
+	      !constmap_init(&maptlsclients,tlsclients.s,tlsclients.len,0))
+	    { err_nogateway(); return; }
+	  sslRehandshake(ssl);
+	}
+	else { err_nogateway(); return; }
       }
-      else { err_nogateway(); return; }
-    }
 #else
-    if (!addrallowed())
-    {
-      if (ssl)
-      { STACK_OF(X509_NAME) *sk;
-        X509 *peercert;
-        stralloc tlsclients = {0};
-        struct constmap maptlsclients;
-        int r;
-
-        SSL_set_verify(ssl,
-                       SSL_VERIFY_PEER|SSL_VERIFY_CLIENT_ONCE,
-                       verify_cb);
-        if ((sk = SSL_load_client_CA_file("control/clientca.pem")) == NULL)
-         { err_nogateway(); return; }
-        SSL_set_client_CA_list(ssl, sk);
-        if((control_readfile(&tlsclients,"control/tlsclients",0) != 1) ||
-           !constmap_init(&maptlsclients,tlsclients.s,tlsclients.len,0))
-          { err_nogateway(); return; }
-
-        SSL_renegotiate(ssl);
-        SSL_do_handshake(ssl);
-        ssl->state = SSL_ST_ACCEPT;
-        SSL_do_handshake(ssl);
-        if ((r = SSL_get_verify_result(ssl)) != X509_V_OK)
-         {out("553 no valid cert for gatewaying: ");
-          out(X509_verify_cert_error_string(r));
-          out(" (#5.7.1)\r\n");
-          return;
-         }
-
-        if (peercert = SSL_get_peer_certificate(ssl))
-         {char emailAddress[256];
-
-          X509_NAME_get_text_by_NID(X509_get_subject_name(
-                                     SSL_get_peer_certificate(ssl)),
-                                     NID_pkcs9_emailAddress, emailAddress, 256);
-	  if (!stralloc_copys(&clientcert, emailAddress)) die_nomem();
-          if (!constmap(&maptlsclients,clientcert.s,clientcert.len))
-            { err_nogwcert(); return; }
-          relayclient = "";
-         }
-          else { err_nogwcert(); return; }
+      if (!allowed)
+      {
+	if (ssl)
+	{ STACK_OF(X509_NAME) *sk;
+	  X509 *peercert;
+	  stralloc tlsclients = {0};
+	  struct constmap maptlsclients;
+	  int r;
+
+	  SSL_set_verify(ssl,
+			 SSL_VERIFY_PEER|SSL_VERIFY_CLIENT_ONCE,
+			 verify_cb);
+	  if ((sk = SSL_load_client_CA_file("control/clientca.pem")) == NULL)
+	   { err_nogateway(); return; }
+	  SSL_set_client_CA_list(ssl, sk);
+	  if((control_readfile(&tlsclients,"control/tlsclients",0) != 1) ||
+	     !constmap_init(&maptlsclients,tlsclients.s,tlsclients.len,0))
+	    { err_nogateway(); return; }
+
+	  SSL_renegotiate(ssl);
+	  SSL_do_handshake(ssl);
+	  ssl->state = SSL_ST_ACCEPT;
+	  SSL_do_handshake(ssl);
+	  if ((r = SSL_get_verify_result(ssl)) != X509_V_OK)
+	   {out("553 no valid cert for gatewaying: ");
+	    out(X509_verify_cert_error_string(r));
+	    out(" (#5.7.1)\r\n");
+	    return;
+	   }
+
+	  if (peercert = SSL_get_peer_certificate(ssl))
+	   {char emailAddress[256];
+
+	    X509_NAME_get_text_by_NID(X509_get_subject_name(
+				       SSL_get_peer_certificate(ssl)),
+				       NID_pkcs9_emailAddress, emailAddress, 256);
+	    if (!stralloc_copys(&clientcert, emailAddress)) die_nomem();
+	    if (!constmap(&maptlsclients,clientcert.s,clientcert.len))
+	      { err_nogwcert(); return; }
+	    relayclient = "";
+	   }
+	    else { err_nogwcert(); return; }
+	 }
+	else { err_nogateway(); return; }
        }
-      else { err_nogateway(); return; }
-     }
 #endif
 #endif
+  }
+  spp_rcpt_accepted();
   if (!stralloc_cats(&rcptto,"T")) die_nomem();
   if (!stralloc_cats(&rcptto,addr.s)) die_nomem();
   if (!stralloc_0(&rcptto)) die_nomem();
@@ -610,6 +625,7 @@
  
   if (!seenmail) { err_wantmail(); return; }
   if (!rcptto.len) { err_wantrcpt(); return; }
+  if (!spp_data()) return;
   if (mailfrom.len == 1 && recipcount > 1) { err_badbounce(); return; }
   seenmail = 0;
   if (databytes) bytestooverflow = databytes + 1;
@@ -635,6 +651,8 @@
 #else
   received(&qqt,"SMTP",local,remoteip,remotehost,remoteinfo,fakehelo);
 #endif
+  qmail_put(&qqt,sppheaders.s,sppheaders.len); /* set in qmail-spp.c */
+  spp_rset();
   blast(&hops);
   hops = (hops >= MAXHOPS);
   if (hops) qmail_fail(&qqt);
@@ -948,6 +966,7 @@
 
   switch (authcmds[i].fun(arg)) {
     case 0:
+      if (!spp_auth(authcmds[i].text, user.s)) return;
       authd = 1;
       relayclient = "";
       remoteinfo = user.s;
@@ -992,8 +1011,10 @@
   if (chdir(auto_qmail) == -1) die_control();
   setup();
   if (ipme_init() != 1) die_ipme();
+  if (spp_connect()) {
   smtp_greet("220 ");
   out(" ESMTP\r\n");
+  }
   if (commands(&ssin,&smtpcommands) == 0) die_read();
   die_nomem();
 }
--- qmail-1.03/qmail-spp.c.spp	Tue Feb  8 12:55:05 2005
+++ qmail-1.03/qmail-spp.c	Tue Feb  8 12:55:05 2005
@@ -0,0 +1,256 @@
+/*
+ * Copyright (C) 2004-2005 Pawel Foremski <pjf@asn.pl>
+ *
+ * This program is free software; you can redistribute it and/or 
+ * modify it under the terms of the GNU General Public License 
+ * as published by the Free Software Foundation; either 
+ * version 2 of the License, or (at your option) any later 
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *** Note
+ *
+ * This is the core of qmail-spp patch for qmail
+ *
+ * Why I made it a separate file? Because I wanted qmail-spp to apply more
+ * cleanly on heavily patched qmail sources and to make it bit simpler to
+ * maintain, so don't treat it as a library.
+ *
+ * "..." comments marks places where code for other SMTP commands should be
+ * added, if needed.
+ *
+ */
+
+#include "readwrite.h"
+#include "stralloc.h"
+#include "substdio.h"
+#include "control.h"
+#include "str.h"
+#include "byte.h"
+#include "env.h"
+#include "exit.h"
+#include "wait.h"
+#include "fork.h"
+#include "fd.h"
+#include "fmt.h"
+#include "getln.h"
+
+/* stuff needed from qmail-smtpd */
+extern void flush();
+extern void out();
+extern void die_nomem();
+extern stralloc addr;
+/* *** */
+
+stralloc sppheaders = {0};
+static int spprun = 0;
+static int sppfok = 0;
+static int sppret;
+static stralloc sppf = {0};
+static stralloc plugins_dummy = {0}, plugins_connect = {0}, plugins_helo = {0}, plugins_mail = {0},
+                plugins_rcpt = {0}, plugins_data = {0}, plugins_auth = {0}; /* ... */
+static stralloc error_mail = {0}, error_rcpt = {0}, error_data = {0}; /* ... */
+static stralloc sppmsg = {0};
+static char rcptcountstr[FMT_ULONG];
+static unsigned long rcptcount;
+static substdio ssdown;
+static char downbuf[128];
+
+static void err_spp(s1, s2) char *s1, *s2; { out("451 qmail-spp failure: "); out(s1); out(": "); out(s2); out(" (#4.3.0)\r\n"); }
+
+int spp_init()
+{
+  int i, len = 0;
+  stralloc *plugins_to;
+  char *x, *conffile = "control/smtpplugins";
+
+  if (!env_get("NOSPP")) {
+    spprun = 1;
+    plugins_to = &plugins_dummy;
+    x = env_get("SPPCONFFILE");
+    if (x && *x) conffile = x;
+    sppfok = control_readfile(&sppf, conffile, 0);
+    if (sppfok != 1) return -1;
+    for (i = 0; i < sppf.len; i += len) {
+      len = str_len(sppf.s + i) + 1;
+      if (sppf.s[i] == '[')
+        switch (sppf.s[i + 1]) {
+          case 'c': plugins_to = &plugins_connect; break;
+          case 'h': plugins_to = &plugins_helo; break;
+          case 'm': plugins_to = &plugins_mail; break;
+          case 'r': plugins_to = &plugins_rcpt; break;
+          case 'd': plugins_to = &plugins_data; break;
+          case 'a': plugins_to = &plugins_auth; break;
+          /* ... */
+          default: plugins_to = &plugins_dummy;
+        }
+      else
+        if (!stralloc_catb(plugins_to, sppf.s + i, len)) die_nomem();
+    }
+  }
+
+  return 0;
+}
+
+void sppout() { if (sppmsg.len) out(sppmsg.s); out("\r\n"); }
+
+int spp(plugins, addrenv) stralloc *plugins; char *addrenv;
+{
+  static int pipes[2];
+  static int i, pid, wstat, match, last;
+  static stralloc data = {0};
+  static char *(args[4]);
+  static stralloc *errors_to;
+
+  if (!spprun) return 1;
+  if (addrenv) if (!env_put2(addrenv, addr.s)) die_nomem();
+  last = 0;
+
+  for (i = 0; i < plugins->len; i += str_len(plugins->s + i) + 1) {
+    if (plugins->s[i] == ':')
+      { args[0] = "/bin/sh"; args[1] = "-c"; args[2] = plugins->s + i + 1; args[3] = 0; }
+    else
+      { args[0] = plugins->s + i; args[1] = 0; }
+
+    if (pipe(pipes) == -1)
+      { err_spp(plugins->s + i, "can't pipe()"); return 0; }
+
+    switch (pid = vfork()) {
+      case -1:
+        err_spp(plugins->s + i, "vfork() failed");
+        return 0;
+      case 0:
+        close(0); close(pipes[0]); fd_move(1, pipes[1]);
+        execv(*args, args);
+        _exit(120);
+    }
+
+    close(pipes[1]);
+    substdio_fdbuf(&ssdown, read, pipes[0], downbuf, sizeof(downbuf));
+    do {
+      if (getln(&ssdown, &data, &match, '\n') == -1) die_nomem();
+      if (data.len > 1) {
+        data.s[data.len - 1] = 0;
+        switch (data.s[0]) {
+          case 'H':
+            if (!stralloc_catb(&sppheaders, data.s + 1, data.len - 2)) die_nomem();
+            if (!stralloc_append(&sppheaders, "\n")) die_nomem();
+            break;
+          case 'C':
+            if (addrenv) {
+              if (!stralloc_copyb(&addr, data.s + 1, data.len - 1)) die_nomem();
+              if (!env_put2(addrenv, addr.s)) die_nomem();
+            }
+            break;
+          case 'S': if (!env_put(data.s + 1)) die_nomem(); break;
+          case 'U': if (!env_unset(data.s + 1)) die_nomem(); break;
+          case 'A': spprun = 0;
+          case 'O':
+          case 'N':
+          case 'D': last = 1; match = 0; break;
+          case 'E':
+          case 'R': last = 1; match = 0;
+          case 'P': out(data.s + 1); out("\r\n"); break;
+          case 'L':
+            switch (data.s[1]) {
+              case 'M': errors_to = &error_mail; break;
+              case 'R': errors_to = &error_rcpt; break;
+              case 'D': errors_to = &error_data; break;
+              /* ... */
+              default: errors_to = 0;
+            }
+            if (errors_to) {
+              if (!stralloc_catb(errors_to, data.s + 2, data.len - 3)) die_nomem();
+              if (!stralloc_catb(errors_to, "\r\n", 2)) die_nomem();
+            }
+            break;
+        }
+      }
+    } while (match);
+
+    close(pipes[0]);
+    if (wait_pid(&wstat,pid) == -1) { err_spp(plugins->s + i, "wait_pid() failed"); return 0; }
+    if (wait_crashed(wstat)) { err_spp(plugins->s + i, "child crashed"); return 0; }
+    if (wait_exitcode(wstat) == 120) { err_spp(plugins->s + i, "can't execute"); return 0; }
+
+    if (last)
+      switch (*data.s) {
+        case 'E': return 0;
+        case 'A':
+        case 'N': return 1;
+        case 'O': return 2;
+        case 'R':
+        case 'D': flush(); _exit(0);
+      }
+  }
+
+  return 1;
+}
+
+int spp_errors(errors) stralloc *errors;
+{
+  if (!errors->len) return 1;
+  if (!stralloc_0(errors)) die_nomem();
+  out(errors->s);
+  return 0;
+}
+
+int spp_connect() { return spp(&plugins_connect, 0); }
+
+int spp_helo(arg) char *arg;
+{
+  if (!env_put2("SMTPHELOHOST", arg)) die_nomem();
+  return spp(&plugins_helo, 0);
+}
+
+void spp_rset()
+{ 
+  if (!stralloc_copys(&sppheaders, "")) die_nomem();
+  if (!stralloc_copys(&error_mail, "")) die_nomem();
+  if (!stralloc_copys(&error_rcpt, "")) die_nomem();
+  if (!stralloc_copys(&error_data, "")) die_nomem();
+  /* ... */
+  rcptcount = 0;
+}
+
+int spp_mail()
+{
+  if (!spp_errors(&error_mail)) return 0;
+  rcptcount = 0;
+  return spp(&plugins_mail, "SMTPMAILFROM");
+}
+
+int spp_rcpt(allowed) int allowed;
+{
+  if (!spp_errors(&error_rcpt)) return 0;
+  rcptcountstr[fmt_ulong(rcptcountstr, rcptcount)] = 0;
+  if (!env_put2("SMTPRCPTCOUNT", rcptcountstr)) die_nomem();
+  if (!env_put2("SMTPRCPTHOSTSOK", allowed ? "1" : "0")) die_nomem();
+  sppret = spp(&plugins_rcpt, "SMTPRCPTTO");
+  return sppret;
+}
+
+void spp_rcpt_accepted() { rcptcount++; }
+
+int spp_data()
+{
+  if (!spp_errors(&error_data)) return 0;
+  return spp(&plugins_data, 0);
+}
+
+int spp_auth(method, user) char *method, *user;
+{
+  if (!env_put2("SMTPAUTHMETHOD", method)) die_nomem();
+  if (!env_put2("SMTPAUTHUSER", user)) die_nomem();
+  return spp(&plugins_auth, 0);
+}
+
+/* ... */
--- qmail-1.03/qmail-spp.h.spp	Tue Feb  8 12:55:05 2005
+++ qmail-1.03/qmail-spp.h	Tue Feb  8 12:55:05 2005
@@ -0,0 +1,14 @@
+#ifndef QMAIL_SPP_H
+#define QMAIL_SPP_H
+
+extern stralloc sppheaders;
+extern int spp_init();
+extern int spp_connect();
+extern int spp_helo();
+extern void spp_rset();
+extern int spp_mail();
+extern int spp_rcpt();
+extern int spp_data();
+extern int spp_auth();
+
+#endif
